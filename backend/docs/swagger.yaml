basePath: /api
definitions:
  models.Account:
    properties:
      accountToken:
        type: string
      accountType:
        type: string
      active:
        type: boolean
      balance:
        type: integer
      blockFlag:
        type: integer
      createdAt:
        type: string
      id:
        type: string
      lastEntryLocId:
        type: integer
      lastEntrySpId:
        type: integer
      lastEntryTime:
        type: string
      status:
        type: string
      txnHistories:
        description: One-to-many relationship with TxnHistory
        items:
          $ref: '#/definitions/models.TxnHistory'
        type: array
      updatedAt:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Association
      userID:
        description: Foreign key, unique constraint for one-to-one relationship
        type: string
    type: object
  models.AccountResponse:
    properties:
      account_token:
        type: string
      account_type:
        type: string
      active:
        type: boolean
      balance:
        type: integer
      block_flag:
        type: integer
      created_at:
        type: string
      id:
        type: string
      last_entry_loc_id:
        type: integer
      last_entry_sp_id:
        type: integer
      last_entry_time:
        type: string
      status:
        type: string
      txn_histories:
        items:
          $ref: '#/definitions/models.TxnHistory'
        type: array
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.UserResponse'
        description: UserID         uuid.UUID    `json:"user_id"`
    type: object
  models.AccoutCreateInput:
    properties:
      account_type:
        type: string
      user_id:
        type: string
    required:
    - account_type
    - user_id
    type: object
  models.ResponseBody:
    properties:
      data: {}
      status:
        type: string
    type: object
  models.ResponseError:
    properties:
      data:
        properties:
          message:
            type: string
        type: object
      status:
        type: string
    type: object
  models.ResponseSuccessAccount:
    properties:
      data:
        properties:
          account:
            $ref: '#/definitions/models.AccountResponse'
          txn_histories:
            items:
              $ref: '#/definitions/models.TxnHistory'
            type: array
          user:
            $ref: '#/definitions/models.UserResponse'
        type: object
      status:
        type: string
    type: object
  models.ResponseSuccessToken:
    properties:
      data:
        properties:
          token:
            type: string
        type: object
      status:
        type: string
    type: object
  models.ResponseSuccessUser:
    properties:
      data:
        properties:
          user:
            $ref: '#/definitions/models.UserResponse'
        type: object
      status:
        type: string
    type: object
  models.SignInByPhone:
    properties:
      password:
        type: string
      phone:
        type: string
    required:
    - password
    - phone
    type: object
  models.SignInInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.SignInResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.SignUpInput:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
      password_confirm:
        minLength: 8
        type: string
      phone:
        type: string
      user_name:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - password_confirm
    - phone
    - user_name
    type: object
  models.TxnHistory:
    properties:
      account:
        allOf:
        - $ref: '#/definitions/models.Account'
        description: Association
      accountID:
        description: Foreign key to Account
        type: string
      createdAt:
        type: string
      equipmentNumber:
        type: string
      id:
        type: string
      locEntryId:
        type: integer
      locExitId:
        type: integer
      spId:
        type: integer
      txnAmount:
        type: integer
      txnRefId:
        type: string
      txnTypeId:
        type: integer
      updatedAt:
        type: string
    required:
    - equipmentNumber
    - locEntryId
    - locExitId
    - spId
    - txnAmount
    - txnRefId
    - txnTypeId
    type: object
  models.User:
    properties:
      account:
        allOf:
        - $ref: '#/definitions/models.Account'
        description: One-to-one relationship with Account
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      userName:
        type: string
      verified:
        type: boolean
    type: object
  models.UserPasswordUpdate:
    properties:
      confirm_new_password:
        type: string
      new_password:
        type: string
      old_password:
        type: string
    type: object
  models.UserResponse:
    properties:
      account_id:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      phone:
        type: string
      role:
        type: string
      updated_at:
        type: string
      user_name:
        type: string
    type: object
  models.UserUpdate:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
      user_name:
        type: string
      verified:
        type: boolean
    type: object
host: 127.0.0.1:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample api server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /accounts/{userId}:
    get:
      consumes:
      - application/json
      description: get account by user id func get account infomation by userid
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResponseSuccessAccount'
            type: array
      summary: get account by user id func get account infomation by userid
      tags:
      - Accounts
  /accounts/create:
    post:
      consumes:
      - application/json
      description: create new account with user id
      parameters:
      - description: Account Data
        in: body
        name: Payload
        required: true
        schema:
          $ref: '#/definitions/models.AccoutCreateInput'
      produces:
      - application/json
      responses:
        "201":
          description: Ok
          schema:
            items:
              $ref: '#/definitions/models.ResponseSuccessAccount'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: create new account with user id
      tags:
      - Accounts
  /auth/login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: Login Data
        in: body
        name: Payload
        required: true
        schema:
          $ref: '#/definitions/models.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/models.ResponseSuccessToken'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: login
      tags:
      - Auth
  /auth/loginbyphone:
    post:
      consumes:
      - application/json
      description: Login by phone number
      parameters:
      - description: Login Data
        in: body
        name: Payload
        required: true
        schema:
          $ref: '#/definitions/models.SignInByPhone'
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/models.SignInResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Login by phone number
      tags:
      - Auth
  /auth/logout:
    get:
      consumes:
      - application/json
      description: logout
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: logout
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: register new account
      parameters:
      - description: Register Data
        in: body
        name: Payload
        required: true
        schema:
          $ref: '#/definitions/models.SignUpInput'
      produces:
      - application/json
      responses:
        "201":
          description: Ok
          schema:
            items:
              $ref: '#/definitions/models.ResponseSuccessUser'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: register new account
      tags:
      - Auth
  /payment/nativepay:
    post:
      consumes:
      - application/json
      description: payment connect to Ksher
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            items:
              $ref: '#/definitions/models.ResponseBody'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: payment connect to Ksher
      tags:
      - Payment
  /users/{id}:
    get:
      consumes:
      - application/json
      description: get user infomation by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResponseSuccessUser'
            type: array
      summary: get user infomation by id
      tags:
      - User
  /users/delete/{id}:
    delete:
      consumes:
      - application/json
      description: delete user by user id
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/models.ResponseError'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Delete user by user id
      tags:
      - User
  /users/me:
    get:
      consumes:
      - application/json
      description: Get current user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResponseSuccessUser'
            type: array
      summary: get current user
      tags:
      - User
  /users/update:
    patch:
      consumes:
      - application/json
      description: update user detail
      parameters:
      - description: User Update Data
        in: body
        name: Payload
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResponseSuccessUser'
            type: array
      summary: update user detail
      tags:
      - User
  /users/update/{id}:
    patch:
      consumes:
      - application/json
      description: update user detail by user id
      parameters:
      - description: User Update Data
        in: body
        name: Payload
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResponseSuccessUser'
            type: array
      summary: update user detail by user id
      tags:
      - User
  /users/updatepassword/{id}:
    patch:
      consumes:
      - application/json
      description: update user password
      parameters:
      - description: Update user password
        in: body
        name: Payload
        required: true
        schema:
          $ref: '#/definitions/models.UserPasswordUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResponseSuccessUser'
            type: array
      summary: update user password
      tags:
      - User
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
