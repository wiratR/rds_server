package main

import (
	"fmt"
	"log"
	"os"

	swagger "github.com/arsmn/fiber-swagger/v2"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/etag"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/wiratR/go-orm-jwt/config"
	dbconn "github.com/wiratR/go-orm-jwt/database"
	"github.com/wiratR/go-orm-jwt/models"
	"github.com/wiratR/go-orm-jwt/routes"

	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "github.com/wiratR/go-orm-jwt/docs"
)

func setupRoutes(app *fiber.App) {

	// Routes
	app.Get("/", HealthCheck)

	// api group
	api := app.Group("/api")
	// give response when at /api
	api.Get("", func(c *fiber.Ctx) error {
		return c.Status(fiber.StatusOK).JSON(fiber.Map{
			"success": true,
			"message": "You are at the api endpoint ðŸ˜‰",
		})
	})

	// connect Auth routes
	routes.AuthRoute(api.Group("/auth"))
	// connect User routes
	routes.UserRoute(api.Group("/users"))
}

// @title Swagger Example API
// @version 1.0
// @description This is a sample api server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host 127.0.0.1:8000
// @BasePath /api
// @schemes http
// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
func main() {
	config, err := config.LoadConfig(".")

	if err != nil {
		log.Fatalf("could not load config: %v", err)
	}

	fmt.Println("main start")
	fmt.Printf("get Environment = %s\n", config.Environment)
	fmt.Printf("get Version = %d\n", config.Version)

	dbconn.InitDatabase()

	// Auto-migrate the schema
	dbconn.DB.Exec("CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"")
	// dbconn.DB.Logger = logger.Default.LogMode(logger.Info)

	log.Println("Running Migrations")
	err = dbconn.DB.AutoMigrate(&models.User{})
	if err != nil {
		log.Fatal("Migration Failed:  \n", err.Error())
		os.Exit(1)
	}

	app := fiber.New()
	// Middleware
	app.Use(recover.New())
	app.Use(cors.New())
	app.Use(logger.New())
	app.Use(etag.New())

	// app.Use(cors.New(cors.Config{
	// 	AllowHeaders:     "Origin,Content-Type,Accept,Content-Length,Accept-Language,Accept-Encoding,Connection,Access-Control-Allow-Origin",
	// 	AllowOrigins:     "*",
	// 	AllowCredentials: true,
	// 	AllowMethods:     "GET,POST,HEAD,PUT,DELETE,PATCH,OPTIONS",
	// }))

	// app.Use(cors.New(cors.Config{
	//     AllowOrigins:     []string{"http://example.com", "http://another-allowed-origin.com"},
	//     AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "DELETE"},
	//     AllowHeaders:     []string{"Origin", "Content-Type", "Authorization"},
	//     ExposeHeaders:    []string{"Content-Length"},
	//     AllowCredentials: true,
	//     MaxAge:           12 * time.Hour,
	// }))

	app.Get("/swagger/*", swagger.HandlerDefault) // default

	// setup routes
	setupRoutes(app) // new

	// Listen on server 8000 and catch error if any
	err = app.Listen(":" + config.Port)

	// handle error
	if err != nil {
		panic(err)
	}

}

func HealthCheck(c *fiber.Ctx) error {
	res := map[string]interface{}{
		"data": "Server is up and running",
	}

	if err := c.JSON(res); err != nil {
		return err
	}

	return nil
}
